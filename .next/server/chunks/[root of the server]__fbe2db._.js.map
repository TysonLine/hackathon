{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/anshnandwani/Desktop/Projects/uOttaHack7/hackathon/src/app/api/generate-embeddings/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport dotenv from 'dotenv';\nimport OpenAI from \"openai\";\n\nconst client = new OpenAI({\n  apiKey: process.env.GROQ_API_KEY,\n  baseURL: \"https://api.groq.com/openai/v1\"\n});\ndotenv.config(); // Load environment variables\n\n// Initialize Groq SDK\nconst groqKey = process.env.NEXT_PUBLIC_GROQ_API_KEY;\nif (!groqKey) {\n  console.error('Groq API Key is missing. Please check your .env file.');\n  process.exit(1);\n}\n\nexport async function POST(req: Request) {\n  try {\n    // Step 1: Parse the request body to get the input text\n    const { text } = await req.json();\n    if (!text) {\n      return NextResponse.json({ error: 'Input text is required.' }, { status: 400 });\n    }\n\n    // Step 2: Generate embeddings using Groq\n    const response = await client.embeddings.create({\n        input: text,\n        model: \"text-embedding-ada-002\",\n      });\n\n    // Step 3: Extract embeddings and return them\n    const embeddings = response.data[0].embedding;\n    return NextResponse.json({ embeddings });\n      \n  } catch (error) {\n    console.error('Error generating embeddings:', error);\n    return NextResponse.json({ error: 'Failed to generate embeddings.' }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,SAAS;AACX;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM,IAAI,6BAA6B;AAE9C,sBAAsB;AACtB,MAAM;AACN,uCAAc;;AAGd;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,uDAAuD;QACvD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAC/B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,yCAAyC;QACzC,MAAM,WAAW,MAAM,OAAO,UAAU,CAAC,MAAM,CAAC;YAC5C,OAAO;YACP,OAAO;QACT;QAEF,6CAA6C;QAC7C,MAAM,aAAa,SAAS,IAAI,CAAC,EAAE,CAAC,SAAS;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAW;IAExC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}