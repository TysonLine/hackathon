{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/anshnandwani/Desktop/Projects/uOttaHack7/hackathon/src/app/components/uploadResume.tsx"],"sourcesContent":["'use client';\nimport React, { useState } from 'react';\nimport pdfToText from 'react-pdftotext';\n\nconst UploadResume = () => {\n  const [file, setFile] = useState<File | null>(null);\n\n  // Actual Pdf Text to be parsed\n  const [text, setText] = useState<string | null>(null);\n\n  // If Pdf is selected or not\n  const [status, setStatus] = useState<string | null>(null);\n\n  // Whenever file is uploaded, we set the current file to file\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    \n    // If the file exists, we set the current File to the uploaded one\n    if (event.target.files && event.target.files[0]) {\n      const uploadedFile = event.target.files[0];\n      setFile(uploadedFile);\n\n      // We take the text from PDF and convert it into text\n      try {\n        const text = await pdfToText(uploadedFile);\n        console.log(text);\n        setText(text);\n\n        // Send the extracted text to the /api/generate-embeddings endpoint\n        const res = await fetch('/api/generate-embeddings', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ text }),\n        });\n\n        const data = await res.json();\n  \n        console.log(\"Received \", data);\n\n      } catch (error) {\n        console.error(error);\n   \n      }\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\"application/pdf\" onChange={handleFileChange} />\n      {file && <p>Uploaded file: {file.name}</p>}\n      {text && <pre>{text}</pre>}\n      {status && <p>{status}</p>}\n    </div>\n  );\n};\n\nexport default UploadResume;"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;AAIA,MAAM,eAAe;IACnB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAE9C,+BAA+B;IAC/B,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhD,4BAA4B;IAC5B,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpD,6DAA6D;IAC7D,MAAM,mBAAmB,OAAO;QAE9B,kEAAkE;QAClE,IAAI,MAAM,MAAM,CAAC,KAAK,IAAI,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE;YAC/C,MAAM,eAAe,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE;YAC1C,QAAQ;YAER,qDAAqD;YACrD,IAAI;gBACF,MAAM,OAAO,MAAM,CAAA,GAAA,mJAAA,CAAA,UAAS,AAAD,EAAE;gBAC7B,QAAQ,GAAG,CAAC;gBACZ,QAAQ;gBAER,mEAAmE;gBACnE,MAAM,MAAM,MAAM,MAAM,4BAA4B;oBAClD,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;wBAAE;oBAAK;gBAC9B;gBAEA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,QAAQ,GAAG,CAAC,aAAa;YAE3B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC;YAEhB;QACF;IACF;IAEA,qBACE,8OAAC;;0BACC,8OAAC;gBAAM,MAAK;gBAAO,QAAO;gBAAkB,UAAU;;;;;;YACrD,sBAAQ,8OAAC;;oBAAE;oBAAgB,KAAK,IAAI;;;;;;;YACpC,sBAAQ,8OAAC;0BAAK;;;;;;YACd,wBAAU,8OAAC;0BAAG;;;;;;;;;;;;AAGrB;uCAEe"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}