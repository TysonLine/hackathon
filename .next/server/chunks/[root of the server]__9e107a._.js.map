{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/anshnandwani/Desktop/Projects/uOttaHack7/hackathon/src/app/api/generate-embeddings/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n// import dotenv from 'dotenv';\n// import OpenAI from \"openai\";\n\n// const client = new OpenAI({\n//   apiKey: process.env.GROQ_API_KEY,\n//   baseURL: \"https://api.groq.com/openai/v1\"\n// });\n// dotenv.config(); // Load environment variables\n\n// // Initialize Groq SDK\n// const groqKey = process.env.NEXT_PUBLIC_GROQ_API_KEY;\n// if (!groqKey) {\n//   console.error('Groq API Key is missing. Please check your .env file.');\n//   process.exit(1);\n// }\n\n// export async function POST(req: Request) {\n//   try {\n//     // Step 1: Parse the request body to get the input text\n//     const { text } = await req.json();\n//     if (!text) {\n//       return NextResponse.json({ error: 'Input text is required.' }, { status: 400 });\n//     }\n\n//     // Step 2: Generate embeddings using Groq\n//     const response = await client.embeddings.create({\n//         input: text,\n//         model: \"text-embedding-ada-002\",\n//       });\n\n//     // Step 3: Extract embeddings and return them\n//     const embeddings = response.data[0].embedding;\n//     return NextResponse.json({ embeddings });\n      \n//   } catch (error) {\n//     console.error('Error generating embeddings:', error);\n//     return NextResponse.json({ error: 'Failed to generate embeddings.' }, { status: 500 });\n//   }\n// }\n\n\n\nexport async function POST(req: Request) {\n  try {\n    const { text } = await req.json();\n    if (!text) {\n      return NextResponse.json({ error: 'Input text is required.' }, { status: 400 });\n    }\n\n    // Simulate generating embeddings\n    const embeddings = `Generated embeddings for: ${text}`;\n    return NextResponse.json({ embeddings });\n  } catch (error) {\n    console.error('Error generating embeddings:', error);\n    return NextResponse.json({ error: 'Failed to generate embeddings.' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;;AA2CO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAC/B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,iCAAiC;QACjC,MAAM,aAAa,CAAC,0BAA0B,EAAE,MAAM;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAW;IACxC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}